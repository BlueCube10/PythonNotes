## How to use extended classes

class Book:
    def __init__(self, title, author):
        self.title = title
        self.author = author
        
    def __str__(self):
        return '<Book: {} by {}>'.format(self.title, self.author)
    
class Textbook(Book):
    def __init__(self, title, author, edition):
        self.edition = edition
        
    
book = Book(title = 'All the light', author= 'some person')
textbook = Titlebook(title='Physics', author='Physics author', edition='5th')
print(textbook)
print(book)

## The Diamond of Death (multiple inheritence) What not to do.
class A:
    def say_my_name(self):
        print('A')
        
class B(A):
    def say_my_name(self):
        print('B')
        
class C(A):
    def say_my_name(self):
        print('C')

class D(B,C):
    pass

d = D()
d.say_my_name()

# this prints B as B is first. Taking precedence.


## How to use Multiple Inheritence Appropriately.
class Writeable:
    def write(self, data):
        with open(self.filepath, 'w') as f:
            f.write(data)
            
class Readable:
    def read(self):
        with open(self.filepath, 'r') as f:
            print(f.read())

class JSONSerializable:
    def to_json(self):
        import json
        print(json.dumps(self.__dict__)) # dumps a dictionary section as JSON format < Dont NTK
            
class Book(Writeable, Readable, JSONSerializable):
    def __init__(self, title, author, filepath):
        self.title = title
        self.author = author
        self.filepath = filepath
        
book = Book(title='something', author='someone', filepath='./book.txt')
book.write('Here is the first line')
book.read()
book.to_json()


## Alternative Formatting instead of inheridence

class Reader:
    def __init__(self, filepath):
        self.filepath = filepath
    
    def read(self):
        with open(self.filepath, 'r') as f:
            print(f.read())   

class Book:
    def __init__(self, title, author, filepath):
        self.title = title
        self.author = author
        self.filepath = filepath  
        self.reader = Reader(filepath)
        
    def read(self):
        self.reader.read()
## Adding the read method as its own function that calls the read method from the reader class
## means that the read function can be used with varying names that cannot be affected by
## inheriting a commonly names method.

## This method also allows for the read method to be used in other classes without using the
## same names.

        
        
        
        
        
        
        
